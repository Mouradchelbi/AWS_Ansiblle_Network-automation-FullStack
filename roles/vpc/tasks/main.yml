---
# VPC and networking infrastructure tasks

- name: Create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    region: "{{ aws_region }}"
    state: present
    dns_hostnames: "{{ enable_dns_hostnames }}"
    dns_support: "{{ enable_dns_support }}"
    tags: "{{ common_tags | combine({'Name': vpc_name, 'Type': 'VPC'}) }}"
  register: vpc_info

- name: Set VPC ID fact
  set_fact:
    vpc_id: "{{ vpc_info.vpc.id }}"

- name: Display VPC information
  debug:
    msg: "VPC created with ID: {{ vpc_id }}"

- name: Create Internet Gateway
  ec2_vpc_igw:
    vpc_id: "{{ vpc_id }}"
    state: present
    region: "{{ aws_region }}"
    tags: "{{ common_tags | combine({'Name': igw_name, 'Type': 'InternetGateway'}) }}"
  register: igw_info

- name: Set IGW ID fact
  set_fact:
    igw_id: "{{ igw_info.gateway_id }}"

- name: Create public subnets
  ec2_vpc_subnet:
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ item.cidr }}"
    az: "{{ item.az }}"
    region: "{{ aws_region }}"
    state: present
    map_public: true
    tags: "{{ common_tags | combine({'Name': item.name, 'Type': 'PublicSubnet', 'Tier': 'Public'}) }}"
  register: public_subnets_info
  loop: "{{ public_subnets }}"

- name: Set public subnet IDs fact
  set_fact:
    public_subnet_ids: "{{ public_subnets_info.results | map(attribute='subnet.id') | list }}"

- name: Create private subnets
  ec2_vpc_subnet:
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ item.cidr }}"
    az: "{{ item.az }}"
    region: "{{ aws_region }}"
    state: present
    map_public: false
    tags: "{{ common_tags | combine({'Name': item.name, 'Type': 'PrivateSubnet', 'Tier': 'Private'}) }}"
  register: private_subnets_info
  loop: "{{ private_subnets }}"

- name: Set private subnet IDs fact
  set_fact:
    private_subnet_ids: "{{ private_subnets_info.results | map(attribute='subnet.id') | list }}"



- name: Check existing Elastic IPs
  shell: >
    aws ec2 describe-addresses --region {{ aws_region }} --output json
  register: existing_eips
  changed_when: false
  when: enable_nat_gateway

- name: Set fact for existing EIP count
  set_fact:
    existing_eip_count: "{{ (existing_eips.stdout | from_json).Addresses | length }}"
  when: enable_nat_gateway

- name: Display EIP status
  debug:
    msg: "Current EIP count: {{ existing_eip_count }}"
  when: enable_nat_gateway

- name: Warn about NAT Gateway skip
  debug:
    msg: "WARNING: Skipping NAT Gateway creation due to EIP limits. Private subnets will not have internet access."
  when: enable_nat_gateway and existing_eip_count >= 5

- name: Set NAT Gateway enabled fact
  set_fact:
    nat_gateway_possible: "{{ existing_eip_count < 5 }}"
  when: enable_nat_gateway

- name: Allocate Elastic IP for NAT Gateway
  ec2_eip:
    region: "{{ aws_region }}"
    in_vpc: true
    state: present
    tags: "{{ common_tags | combine({'Name': nat_eip_name, 'Type': 'ElasticIP'}) }}"
  register: nat_eip
  when: enable_nat_gateway and nat_gateway_possible

- name: Create NAT Gateway
  ec2_vpc_nat_gateway:
    subnet_id: "{{ public_subnet_ids[0] }}"
    allocation_id: "{{ nat_eip.allocation_id }}"
    region: "{{ aws_region }}"
    state: present
    tags: "{{ common_tags | combine({'Name': nat_gateway_name, 'Type': 'NATGateway'}) }}"
  register: nat_gateway_info
  when: enable_nat_gateway and nat_gateway_possible and nat_eip is defined

- name: Set NAT Gateway ID fact
  set_fact:
    nat_gateway_id: "{{ nat_gateway_info.nat_gateway_id | default(omit) }}"
  when: enable_nat_gateway and nat_gateway_possible and nat_gateway_info is defined and nat_gateway_info.nat_gateway_id is defined

- name: Set empty NAT Gateway ID fact when skipped
  set_fact:
    nat_gateway_id: ""
  when: not (enable_nat_gateway and nat_gateway_possible and nat_gateway_info is defined and nat_gateway_info.nat_gateway_id is defined)

- name: Create public route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ igw_id }}"
    subnets: "{{ public_subnet_ids }}"
    tags: "{{ common_tags | combine({'Name': public_route_table_name, 'Type': 'RouteTable'}) }}"
  register: public_rt

- name: Debug NAT Gateway status
  debug:
    msg: |
      NAT Gateway Status:
      - enable_nat_gateway: {{ enable_nat_gateway | default(false) }}
      - nat_gateway_info: {{ nat_gateway_info | default({}) | to_nice_json }}
      - nat_gateway_id: {{ nat_gateway_id | default('Not set') }}

- name: Debug NAT Gateway ID
  debug:
    msg: "Checking NAT Gateway with ID: {{ nat_gateway_id }}"
  when: enable_nat_gateway and nat_gateway_possible and nat_gateway_id is defined and nat_gateway_id != ''

- name: Debug NAT Gateway status before wait
  debug:
    var: nat_gateway_id
  when: enable_nat_gateway and nat_gateway_possible and nat_gateway_id is defined and nat_gateway_id != ''

- name: Wait for NAT Gateway to be available
  amazon.aws.ec2_vpc_nat_gateway_info:
    region: "{{ aws_region }}"
    filters:
      nat-gateway-id: "{{ nat_gateway_id }}"
  register: nat_gateway_status
  until: nat_gateway_status is defined and 
         nat_gateway_status.result is defined and 
         nat_gateway_status.result | length > 0 and 
         nat_gateway_status.result[0].state == "available"
  retries: 30
  delay: 10
  when: enable_nat_gateway and nat_gateway_possible and nat_gateway_id is defined and nat_gateway_id != ''

- name: Debug NAT Gateway status after wait
  debug:
    var: nat_gateway_status
  when: enable_nat_gateway and nat_gateway_possible and nat_gateway_id is defined and nat_gateway_id != ''

- name: Debug NAT Gateway Status
  debug:
    var: nat_gateway_status
  when: enable_nat_gateway and nat_gateway_possible and nat_gateway_id is defined and nat_gateway_id != ''

- name: Create private route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    routes: "{{ [{'dest': '0.0.0.0/0', 'nat_gateway_id': nat_gateway_id}] if (enable_nat_gateway and nat_gateway_possible and nat_gateway_id is defined and nat_gateway_id != '') else [] }}"
    subnets: "{{ private_subnet_ids }}"
    tags: "{{ common_tags | combine({'Name': private_route_table_name, 'Type': 'RouteTable', 'Description': 'Private subnets route table'}) }}"
  register: private_rt

- name: Debug NAT Gateway status
  debug:
    msg: |
      NAT Gateway Configuration Status:
      - NAT Gateway Enabled in Config: {{ enable_nat_gateway | default(false) }}
      - NAT Gateway Creation Possible: {{ nat_gateway_possible | default(false) }}
      - NAT Gateway ID: {{ nat_gateway_id | default('Not created') }}
      - EIP Status: {{ 'Available' if nat_gateway_possible else 'Limit reached' }}
      - Creation Status: {{ 'Skipped due to EIP limits' if not nat_gateway_possible else ('Pending' if enable_nat_gateway else 'Disabled in config') }}

- name: Display private subnet routing status
  debug:
    msg: >-
      Private subnets status:
      {% if enable_nat_gateway and nat_gateway_possible and nat_gateway_id is defined and nat_gateway_id != '' %}
      - Internet access: Enabled via NAT Gateway
      - NAT Gateway ID: {{ nat_gateway_id }}
      {% else %}
      - Internet access: Disabled (No NAT Gateway available)
      - Note: Private subnets will not have outbound internet access
      - Reason: {{ 'EIP limit reached' if not nat_gateway_possible else 'NAT Gateway not enabled or failed to create' }}
      {% endif %}

- name: Create VPC Flow Logs
  cloudwatchlogs_log_group:
    log_group_name: "{{ vpc_flow_log_group }}"
    retention: "{{ log_retention_days }}"
    region: "{{ aws_region }}"
    state: present
    tags: "{{ common_tags }}"
  when: enable_flow_logs

- name: Create IAM role for VPC Flow Logs
  iam_role:
    name: "{{ vpc_name }}-flowlogs-role"
    assume_role_policy_document: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "vpc-flow-logs.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
    state: present
  register: flowlogs_role
  when: enable_flow_logs

- name: Attach inline policy to Flow Logs role
  iam_policy:
    iam_type: role
    iam_name: "{{ vpc_name }}-flowlogs-role"
    policy_name: "VPCFlowLogsDeliveryPolicy"
    policy_json: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams"
            ],
            "Resource": "*"
          }
        ]
      }
    state: present
  when: enable_flow_logs and flowlogs_role is defined

- name: Check existing VPC Flow Logs
  shell: >
    aws ec2 describe-flow-logs --filter Name=resource-id,Values={{ vpc_id }} --region {{ aws_region }} --output json
  register: existing_flow_logs
  when: enable_flow_logs
  changed_when: false

- name: Debug Flow Logs variables
  debug:
    msg: |
      VPC Flow Logs Variables:
      - flowlogs_role: {{ flowlogs_role | to_nice_json }}
      - vpc_id: {{ vpc_id }}
      - vpc_flow_log_group: {{ vpc_flow_log_group }}

- name: Debug Flow Logs Role
  debug:
    var: flowlogs_role
  when: enable_flow_logs and flowlogs_role is defined

- name: Set Flow Logs Role ARN fact
  set_fact:
    flow_logs_role_arn: "arn:aws:iam::{{ flowlogs_role.iam_role.arn.split(':')[4] }}:role/{{ flowlogs_role.iam_role.role_name }}"
  when: enable_flow_logs and flowlogs_role is defined and flowlogs_role.iam_role is defined

- name: Debug Flow Logs parameters
  debug:
    msg: |
      Flow Logs Configuration:
      - VPC ID: {{ vpc_id }}
      - Log Group: {{ vpc_flow_log_group }}
      - Role ARN: {{ flow_logs_role_arn }}
  when: enable_flow_logs

- name: Enable VPC Flow Logs
  shell: >
    aws ec2 create-flow-logs 
    --resource-type VPC 
    --resource-ids {{ vpc_id }} 
    --traffic-type ALL 
    --log-destination-type cloud-watch-logs
    --log-group-name {{ vpc_flow_log_group }}
    --deliver-logs-permission-arn {{ flow_logs_role_arn }}
    --region {{ aws_region }}
  register: flow_logs_result
  when: enable_flow_logs and flow_logs_role_arn is defined
  ignore_errors: true

- name: Display Flow Logs creation result
  debug:
    msg: "Flow Logs creation {{ 'succeeded' if flow_logs_result.rc == 0 else 'failed: ' + flow_logs_result.stderr }}"
  when: >
    enable_flow_logs and 
    flow_logs_result is defined and 
    flowlogs_role is defined and 
    (existing_flow_logs.stdout | from_json).FlowLogs | length == 0

- name: Display VPC deployment summary
  debug:
    msg: |
      VPC Deployment Summary:
      =======================
      VPC ID: {{ vpc_id }}
      Internet Gateway: {{ igw_id }}
      NAT Gateway: {{ nat_gateway_id if enable_nat_gateway else 'Not created' }}
      Public Subnet: Created in {{ availability_zone }}
      Private Subnet: Created in {{ availability_zone }}
      Flow Logs: {{ 'Enabled' if enable_flow_logs else 'Disabled' }}